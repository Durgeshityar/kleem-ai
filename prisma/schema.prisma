generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  forms                 Form[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Form {
  id        String         @id @default(cuid())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String
  settings  Json
  edges     Edge[]
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses FormResponse[]
  nodes     Node[]
}

model Node {
  id       String @id @default(cuid())
  formId   String
  type     String
  position Json
  data     Json
  form     Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model Edge {
  id     String @id @default(cuid())
  formId String
  source String
  target String
  type   String
  data   Json
  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FormResponse {
  id        String   @id @default(cuid())
  formId    String
  createdAt DateTime @default(now())
  responses Json
  metadata  Json?
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}
